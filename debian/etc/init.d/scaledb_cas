#!/bin/bash
#
# Copyright 2015 ScaleDB, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


### BEGIN INIT INFO
# Provides:          scaledb_cas
# Required-Start:    $local_fs $time $remote_fs
# Required-Stop:     $remote_fs $time $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Start-Before:    scaledb_slm mysql
# X-Stop-After:      mysql scaledb_slm
# Short-Description: ScaleDB CAS
# Description:       ScaleDB CAS
### END INIT INFO



# set -x

SCALEDB_HOME="/usr/sbin"
SCALEDB_BIN="/usr/bin"
SCALEDB_DATA_DIR="/var/lib/scaledb"
SCALEDB_CONFIG_DIR="/etc/scaledb"
SCALEDB_CAS_CONFIG="$SCALEDB_CONFIG_DIR/cas.cnf"
SCALEDB_LOCK_DIR="/var/lock/scaledb"

# Start the service ScaleDB CAS (Cached Attached Storage)
start() {
	if [ `pgrep -f ${SCALEDB_HOME}/scaledb_cas | wc -l` -gt 0 ]
	then
		echo ScaleDB CAS is already running.
		exit 3
	fi

	if [ ! -f ${SCALEDB_CAS_CONFIG} ]
	then
		echo Missing CAS configuration file.
		exit 1
	fi

  if [ `grep "^ *cas_type" ${SCALEDB_CAS_CONFIG} | wc -l` -gt 0 ]
	then
		if [ `grep "^ *cas_type" ${SCALEDB_CAS_CONFIG} | tail -n 1 | cut -d '=' -f 2 | awk '{print tolower($0)}'` == "mirror" ]
		then
			cas_type="-m "
		else
			cas_type=""
		fi
	else
		cas_type=""
	fi

	if [ `grep "^ *cas_id" ${SCALEDB_CAS_CONFIG} | wc -l` -gt 0 ]
	then
		cas_id="-s `grep "^ *cas_id" ${SCALEDB_CAS_CONFIG} | tail -n 1 | cut -d '=' -f 2 | awk '{print tolower($0)}'`"
	else
		cas_id="-s 1"
	fi

  echo Starting ScaleDB CAS server...
	if [ "`${SCALEDB_BIN}/cas_run -b ${SCALEDB_HOME} -f ${SCALEDB_CAS_CONFIG} ${cas_id} ${cas_type} -d -v | tail -1`"='Ok' ]
	then
		### Create the lock file ###
		pgrep -f ${SCALEDB_HOME}/scaledb_cas > $SCALEDB_LOCK_DIR/scaledb_cas_started
		echo ScaleDB CAS Server started.
	else
		echo ERROR starting CAS Server.
		exit 1
	fi
}

# Initialize the service ScaleDB CAS (Cached Attached Storage)
init() {
	if [ `pgrep -f ${SCALEDB_HOME}/scaledb_cas | wc -l` -gt 0 ]
	then
		echo ScaleDB CAS is already running.
		exit 3
	fi

	if [ ! -f ${SCALEDB_CAS_CONFIG} ]
	then
		echo Missing CAS configuration file.
		exit 1
	fi

	if [ `grep "^ *cas_type" ${SCALEDB_CAS_CONFIG} | tail -n 1 | cut -d '=' -f 2 | awk '{print tolower($0)}'` == "mirror" ]
	then
		cas_type="-m "
	else
		cas_type=""
	fi

	if [ `grep "^ *cas_id" ${SCALEDB_CAS_CONFIG} | wc -l` -gt 0 ]
	then
		cas_id="-s `grep "^ *cas_id" ${SCALEDB_CAS_CONFIG} | tail -n 1 | cut -d '=' -f 2 | awk '{print tolower($0)}'`"
	else
		cas_id="-s 1"
	fi

	echo Initilizing ScaleDB CAS server...
	if [ `${SCALEDB_BIN}/cas_run -b ${SCALEDB_HOME} -f ${SCALEDB_CAS_CONFIG} ${cas_id} ${cas_type} -d -v -x | tail -1`='Ok' ]
	then
		### Create the lock file ###
		pgrep -f ${SCALEDB_HOME}/scaledb_cas > $SCALEDB_LOCK_DIR/scaledb_cas_initialized
		pgrep -f ${SCALEDB_HOME}/scaledb_cas > $SCALEDB_LOCK_DIR/scaledb_cas_started
		echo ScaleDB CAS server initialized.
	else
		echo ERROR initializing CAS Server.
		exit 1
	fi
}

# Stop the service ScaleDB CAS
stop() {
	if [ `pgrep -f ${SCALEDB_HOME}/scaledb_cas | wc -l` -eq 0 ]
	then
		echo It looks like ScaleDB CAS is not running.
		exit 3
	fi

  echo Stopping ScaleDB CAS server...
	echo DO31 | nc 127.0.0.1 13306
	sleep 1
	if [ `pgrep -f ${SCALEDB_HOME}/scaledb_cas | wc -l` -gt 0 ]
	then
		echo DO31 | nc 127.0.0.1 13306
	fi

	sleep 1
	if [ `pgrep -f ${SCALEDB_HOME}/scaledb_cas | wc -l` -gt 0 ]
	then
		echo Error stopping CAS Server.
		exit 1
	else
		cat $SCALEDB_LOCK_DIR/scaledb_cas_started > $SCALEDB_LOCK_DIR/scaledb_cas_stopped
		echo ScaleDB CAS Server stopped.
	fi
}

# Status of the ScaleDB CAS
status() {
	if [ `pgrep -f ${SCALEDB_HOME}/scaledb_cas | wc -l` -gt 0 ]
	then
    echo ScaleDB CAS is running.
	else
    echo ScaleDB CAS is not running.
  fi
}

### main logic ###
case "$1" in
  init)
        init
        ;;
  start)
        start
        ;;
  stop)
        stop
        ;;
  status)
        status scaledb_cas
        ;;
  restart|reload|force-reload|condrestart)
        stop
	sleep 2
        start
        ;;
  *)
        echo $"Usage: $0 {start|stop|restart|reload|status|force-reload|init}"
        exit 1
esac
exit 0
